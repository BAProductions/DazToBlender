// DAZ Studio version 4.15.0.2 filetype DAZ Script

(function( aArgs ){
    // Imported Arguments
    var s_oNode;
    var s_sDazBridgeName = "";
    var s_sPresetPath = "";

    // Returned Values
    var s_sMorphRules = "";

    // Static Arrays
    var s_aMorphList = [];
    var s_aMorphsToExport = [];
    
    // Static Objects
    var s_oMorphs = {};
    var s_oMorphsForNode = {};
    var s_oSelectedInTree = {};
    var s_oAvailObjects = {};

    // Static Widgets
    var s_wMorphTreeWidget = null;
    var s_wMorphListWidget = null;
    var s_wMorphExportListWidget = null;
    var s_wFilterEdit = null;
    var s_wPresetCombo = null;

    /*********************************************************************/
    // bool : ...
    function containsObject( obj, list ) 
    {
        for( var i = 0; i < list.length; i++ ){
            if( list[i] === obj ){
                return true;
            }
        }
        return false;
    };

    /*********************************************************************/
    // void : ...
    // TODO: Find a better method to setup of Variables
    function initilizeArgs()
    {
        for( var i = 0, nArgs = aArgs.length; i < nArgs; i += 1 ){
            vArg = aArgs[i];
            sType = typeof( vArg );
            if( sType == "object" ){
                s_oNode = vArg
            }
            else{
                if( vArg.indexOf( "Documents" ) > 0 ){
                    s_sPresetPath = vArg;
                }
                else{
                    s_sDazBridgeName = vArg;
                }
            }
        }

    };

    /*********************************************************************/
    // void : ...
    function morphInfo( sName, sLabel, sPath, sType, oProperty, sParent, bHidden, nMin, nMax )
    {
        this.name = sName;
        this.label = sLabel;
        this.path = sPath;
        this.type = sType;
        this.property = oProperty;
        this.parent = sParent;
        this.hidden = bHidden;
        this.min = nMin;
        this.max = nMax;
    };
    
    /*********************************************************************/
    // void : ...
    function morphSelectionDialog( wDlg )
    {
        // Get the current style
        var oStyle = App.getStyle();
        // Get the general margin
        var nMargin = oStyle.pixelMetric( "DZ_GeneralMargin" )

        // Set the dialog title 
        wDlg.caption = "Select Morphs";

        var wMainWgt = new DzWidget( wDlg );

        // Create Layouts
        var lytMain = new DzVBoxLayout( wMainWgt );
        lytMain.margin = nMargin;
        lytMain.spacing = nMargin;
        var lytSettings = new DzHBoxLayout( lytMain );
        lytSettings.margin = nMargin;
        lytSettings.spacing = nMargin;
        var lytMorphs = new DzHBoxLayout( lytMain );
        lytMorphs.margin = nMargin;
        lytMorphs.spacing = nMargin;
        var lytTree = new DzVBoxLayout( lytMorphs );
        lytTree.margin = nMargin;
        lytTree.spacing = nMargin;
        var lytMorphList = new DzVBoxLayout( lytMorphs );
        lytMorphList.margin = nMargin;
        lytMorphList.spacing = nMargin;
        var lytSelectedList = new DzVBoxLayout( lytMorphs );
        lytSelectedList.margin = nMargin;
        lytSelectedList.spacing = nMargin;
        
        // Left tree with morph structure
        s_wMorphTreeWidget = new DzListView( wMainWgt );
        s_wMorphTreeWidget.resizeMode = DzListView.Maximum;   
        s_wMorphTreeWidget.widthMode = DzListView.NoColumn; 
        s_wMorphTreeWidget.addColumn("");
        s_wMorphTreeWidget.rootIsDecorated = true;
        s_wMorphTreeWidget.treeStepSize = 20;
       
        
        // Center list showing morphs for selected tree items        
	    s_wMorphListWidget = new DzListView( wMainWgt );
        s_wMorphListWidget.resizeMode = DzListView.Maximum;  
        s_wMorphListWidget.widthMode = DzListView.NoColumn; 
        s_wMorphListWidget.addColumn( "" );
        s_wMorphListWidget.selectionMode = DzListView.Extended;


        // Right list showing morphs that will export
	    s_wMorphExportListWidget = new DzListView( wMainWgt );
        s_wMorphExportListWidget.resizeMode = DzListView.Maximum; 
        s_wMorphExportListWidget.widthMode = DzListView.NoColumn;
        s_wMorphExportListWidget.addColumn( "" );
        s_wMorphExportListWidget.selectionMode = DzListView.Extended;
        

        // Quick filter box
	    var wFilterLabel = new DzLabel( wMainWgt );
        wFilterLabel.text = 'filter';
        s_wFilterEdit = new DzLineEdit( wMainWgt );
        

        // Presets
        var wChoosePresetLabel = new DzLabel( wMainWgt );
        wChoosePresetLabel.text = "Choose Preset";
        var wSavePresetButton = new DzPushButton( wMainWgt );
        wSavePresetButton.text = "Save Preset";
        s_wPresetCombo = new DzComboBox( wMainWgt );
        lytSettings.addWidget( wChoosePresetLabel );
        lytSettings.addWidget( s_wPresetCombo );
        lytSettings.addWidget( wSavePresetButton );
        lytSettings.addStretch();    

       
        // Left Tree 
        var wMorphGrpLabel = new DzLabel( wMainWgt );
        wMorphGrpLabel.text = 'Morph Groups';
        var wAvailMorphLabel = new DzLabel( wMainWgt );
        wAvailMorphLabel.text = 'Select to see available morphs';
        lytTree.addWidget( wMorphGrpLabel );
        lytTree.addWidget( wAvailMorphLabel );
        lytTree.addWidget( s_wMorphTreeWidget );
        

        // Buttons for Utlilties
        var wMorphGroupBox = DzGroupBox( wMainWgt );
        wMorphGroupBox.title = "Morph Utlities";
        var lytMorphGroup = new DzVBoxLayout( wMorphGroupBox );
        lytTree.addWidget( wMorphGroupBox );
        lytMorphGroup.margin = nMargin;
        lytMorphGroup.spacing = nMargin;
        
        var wJCMGroupBox = DzGroupBox( wMorphGroupBox );
        wJCMGroupBox.title = "Add JCMs";
        var lytJCM = new DzGridLayout( wJCMGroupBox );
        lytJCM.margin = nMargin;
        lytJCM.spacing = nMargin;

        var wExpressGroupBox = DzGroupBox( wMorphGroupBox );
        wExpressGroupBox.title = "Add Expressions";
        var lytExpress = new DzGridLayout( wExpressGroupBox );
        lytExpress.margin = nMargin;
        lytExpress.spacing = nMargin;

        var wFaceGroupBox = DzGroupBox( wMorphGroupBox );
        wFaceGroupBox.title = "Add Facial Morphs";
        var lytFace = new DzGridLayout( wFaceGroupBox );
        lytFace.margin = nMargin;
        lytFace.spacing = nMargin;

        var wExtraGroupBox = DzGroupBox( wMorphGroupBox );
        wExtraGroupBox.title = "Extra Options";
        var lytExtra = new DzGridLayout( wExtraGroupBox );
        lytExtra.margin = nMargin;
        lytExtra.spacing = nMargin;
      
        lytMorphGroup.addWidget( wJCMGroupBox );
        lytMorphGroup.addWidget( wExpressGroupBox );
        lytMorphGroup.addWidget( wFaceGroupBox );
        lytMorphGroup.addWidget( wExtraGroupBox );

        // Buttons
        var wArmJCMButton = new DzPushButton( wJCMGroupBox );
        wArmJCMButton.text = "Arms";
        lytJCM.addWidget( wArmJCMButton, 0, 1);
        var wLegsJCMButton = new DzPushButton( wJCMGroupBox );
        wLegsJCMButton.text = "Legs";
        lytJCM.addWidget( wLegsJCMButton, 0, 2);
        var wTorsoJCMButton = new DzPushButton( wJCMGroupBox );
        wTorsoJCMButton.text = "Torso";
        lytJCM.addWidget( wTorsoJCMButton, 0, 3);
        var wGen8ExpressBut = new DzPushButton( wExpressGroupBox );
        wGen8ExpressBut.text = "Genesis 8";
        lytExpress.addWidget( wGen8ExpressBut, 0, 1);
        var wGen8_1ExpressBut = new DzPushButton( wExpressGroupBox );
        wGen8_1ExpressBut.text = "Genesis 8.1";
        lytExpress.addWidget( wGen8_1ExpressBut, 0, 2);
        var wGen8FaceBut = new DzPushButton( wFaceGroupBox );
        wGen8FaceBut.text = "Genesis 8";
        lytFace.addWidget( wGen8FaceBut, 0, 1);
        var wGen8_1FaceBut = new DzPushButton( wFaceGroupBox );
        wGen8_1FaceBut.text = "Genesis 8.1";
        lytFace.addWidget( wGen8_1FaceBut, 0, 2);
        var wVismesbut = new DzPushButton( wExtraGroupBox );
        wVismesbut.text = "Visemes";
        lytExtra.addWidget( wVismesbut, 0, 1);
        var wAddConnectedMorphs = new DzPushButton( wExtraGroupBox );
        wAddConnectedMorphs.text = "Find Connected Morphs";
        lytExtra.addWidget( wAddConnectedMorphs, 1, 1, 1, 2);

       
        // Center List of morphs based on tree selection
        var wMorphSelGrpLabel = new DzLabel( wMainWgt );
        wMorphSelGrpLabel.text = 'Morphs in Group';
        var wAvailSelMorphLabel = new DzLabel( wMainWgt );
        wAvailSelMorphLabel.text = 'Select and click Add for Export';
        lytMorphList.addWidget( wMorphSelGrpLabel );
        lytMorphList.addWidget( wAvailSelMorphLabel );
        var lytFilter = new DzVBoxLayout( lytMorphList );
        lytFilter.margin = nMargin;
        lytFilter.spacing = nMargin;
        lytFilter.addWidget( wFilterLabel );
        lytFilter.addWidget( s_wFilterEdit );
        lytMorphList.addWidget( s_wMorphListWidget );
    
        // Button for adding morphs
        var wAddMorphsButton = new DzPushButton( wMainWgt );
        wAddMorphsButton.text = "Add For Export";
        lytMorphList.addWidget( wAddMorphsButton );
        
        // Right List of morphs that will export
        var wMorphExportLabel = new DzLabel( wMainWgt );
        wMorphExportLabel.text = 'Morphs to Export';
        lytSelectedList.addWidget( wMorphExportLabel );
        lytSelectedList.addWidget( s_wMorphExportListWidget );
        
        // Button for clearing morphs from export
        var wRemoveMorphsButton = new DzPushButton( wMainWgt );
        wRemoveMorphsButton.text = "Remove From Export";
        lytSelectedList.addWidget( wRemoveMorphsButton );
        
        wDlg.addWidget( wMainWgt );
        wDlg.setFixedWidth( 800 );
        wDlg.setFixedHeight( 800 );
        refreshPresetsCombo();

        // Create Connections
        connect( s_wMorphTreeWidget, "currentChanged(DzListViewItem*)",itemSelectionChanged );
        connect( s_wFilterEdit, "textChanged(const QString&)", filterChanged );
        wArmJCMButton.released.connect( handleArmJCMMorphsButton );
        wLegsJCMButton.released.connect( handleLegsJCMMorphsButton );
        wTorsoJCMButton.released.connect( handleTorsoJCMMorphsButton );
        wGen8ExpressBut.released.connect( handleGen8ExpressMorphsButton );
        wGen8_1ExpressBut.released.connect( handleGen8_1ExpressMorphsButton );
        wGen8FaceBut.released.connect( handleGen8FaceMorphsButton );
        wGen8_1FaceBut.released.connect( handleGen8_1FaceMorphsButton );
        wVismesbut.released.connect( handleVismesMorphsButton);
        wAddConnectedMorphs.released.connect( loadConnectedMorphs );
        wSavePresetButton.released.connect( handleSavePreset );
        wAddMorphsButton.released.connect( handleAddMorphsButton );
        wRemoveMorphsButton.released.connect( handleRemoveMorphsButton );
    };


    /*********************************************************************/
    // Void : Build out the Left morphs tree based on the current selection
    function prepareDialog()
    {
        var oSelectedNode;
        var oParentNode;
        var oParentFigureNode;

        oSelectedNode = s_oNode;
        // For item like clothing, create the morph list from the character
        oParentNode = oSelectedNode;
        if (oParentNode = oSelectedNode.getNodeParent()){
            if(oParentNode.inherits( "DzFigure" )){
                oParentFigureNode = oParentNode.getSkeleton();
                oSelectedNode = oParentFigureNode;
            }
        }
        
        s_oMorphs = {};
	    getAvailableMorphs( oSelectedNode );
        for ( var i = 0; i < oSelectedNode.getNumNodeChildren(); i++ ){
            oChildNode = oSelectedNode.getNodeChild( i );
            getAvailableMorphs( oChildNode );
        }
        updateMorphsTree();
        handlePresetChanged("LastUsed.csv");
    };

    /*********************************************************************/
    // void : When the filter text is changed, update the center list
    function filterChanged()
    {
        var sNewFilter;
        var oMorphInfo;

        s_wMorphListWidget.clear();
        sNewFilter =  s_wFilterEdit.text.toLowerCase();
        s_wMorphListWidget.clear();
        for(var i = 0; i < s_oSelectedInTree.length; i++){
            oMorphInfo = s_oSelectedInTree[i]
            if( sNewFilter == "" || sNewFilter.isEmpty() || oMorphInfo.label.toLowerCase().indexOf(sNewFilter) != -1 )
            {   
                oItem = DzListViewItem( s_wMorphListWidget );
                oItem.setText( 0 ,oMorphInfo.label );
                oItem.addDataItem( "name", oMorphInfo.name );
            }
        }

        s_wMorphListWidget.sort();
    };

    /*********************************************************************/
    // array : ...
    function getAvailableMorphs( oNode )
    {
        var oObject;
        var oShape;
        var oProperty;
        var oPresentation;
        var sPropName;
        var sPropLabel;
        var oMorphInfo;
        var sPath;
        var sParent;


        aNewMorphList = [];
        oObject = oNode.getObject();
        if( oObject != null ){
            oShape = oObject.getCurrentShape();
        }
        for( var i = 0; i < oNode.getNumProperties(); i++ ){
            oProperty = oNode.getProperty( i );
            sPropName = oProperty.getName();
            sPropLabel = oProperty.getLabel();
            oPresentation = oProperty.getPresentation();
            if (oPresentation != undefined){
                sPath = oNode.getLabel() + "/" + oProperty.getPath();
                sParent = sPath.split( "/" )[0];
                oMorphInfo = new morphInfo(
                    sPropName,
                    sPropLabel,
                    sPath,
                    oPresentation.type,
                    oProperty,
                    sParent,
                    oProperty.isHidden(),
                    oProperty.getMin(),
					oProperty.getMax()
                );
                
                if( !( oMorphInfo.name in s_oMorphs ) ){
                    s_oMorphs[oMorphInfo.name] = oMorphInfo;
                    if( !( oMorphInfo.parent in s_oAvailObjects ) ){
                        s_oAvailObjects[oMorphInfo.parent] = {};
                    }
                    if( !( oMorphInfo.name in s_oAvailObjects[oMorphInfo.parent] ) ){
                        s_oAvailObjects[oMorphInfo.parent][oMorphInfo.name] = oMorphInfo;
                    }
                }
            }
        }
        if( oObject ){
            for( var i = 0; i < oObject.getNumModifiers(); i++ ){
                oModifer = oObject.getModifier( i );
                sModName = oModifer.getName();
                sModLabel = oModifer.getLabel();
                if(oModifer.inherits( "DzMorph" ) ){
                    for( var j = 0; j < oModifer.getNumProperties(); j++ ){
                        oProperty = oModifer.getProperty( j );
                        sPropName = oProperty.getName();
                        sPropLabel = oProperty.getLabel();
                        oPresentation = oProperty.getPresentation();
                        if (oPresentation != undefined){
                            sPath = oNode.getLabel() + "/" + oProperty.getPath();
                            sParent = sPath.split( "/" )[0];
                            oMorphInfo = new morphInfo(
                                sModName,
                                sPropLabel,
                                sPath,
                                oPresentation.type,
                                oProperty,
                                sParent,
                                oProperty.isHidden(),
                                oProperty.getMin(),
                                oProperty.getMax()
                            );
                            if( !( oMorphInfo.name in s_oMorphs ) ){
                                s_oMorphs[oMorphInfo.name] = oMorphInfo;
                                if( !( oMorphInfo.parent in s_oAvailObjects ) ){
                                    s_oAvailObjects[oMorphInfo.parent] = {};
                                }
                                if( !( oMorphInfo.name in s_oAvailObjects[oMorphInfo.parent] ) ){
                                    s_oAvailObjects[oMorphInfo.parent][oMorphInfo.name] = oMorphInfo;
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    
    /*********************************************************************/
    // Void : Build out the left tree
    function updateMorphsTree()
    {
        var sPath;
        var sPathPart;
        var sMorph;
        var oParentItem;
        var sID;

        s_wMorphTreeWidget.clear();
       
        s_oMorphsForNode = {};
        for( sParent in s_oAvailObjects ){
            for( sMorph in s_oAvailObjects[sParent] ){
                sPath = s_oMorphs[sMorph].path;
                sType = s_oMorphs[sMorph].path;
                aPathParts = sPath.split( "/" );
                oParentItem = null;
                for( var i = 0; i < aPathParts.length; i++ ){
                    sPathPart = aPathParts[i];
                    if( i != 0 ){
                        nPaths = aPathParts.length;
                        if( i >= 6 ){
                            sPathPart_helper += aPathParts[i - 1] + aPathParts[i - 2]
                        }
                        else{
                            sPathPart_helper += aPathParts[i - 1]
                        }
                    }
                    else{
                        sPathPart_helper = ""
                    }
                    // Used to Match to correct node.
                    sID = sParent + sPathPart_helper + sPathPart;
                    
                    if( sPathPart == "" ){
                        continue;
                    }
                    oParentItem = findTreeItem( oParentItem, sPathPart, sID );
                    if( !( sID in s_oMorphsForNode ) ){
                        s_oMorphsForNode[sID] = []
                    }
                    s_oMorphsForNode[sID].push( s_oMorphs[sMorph] );
                }
            }
        }
    };

    /*********************************************************************/
    // Void : This function could be better named.  It will find the node matching the property path
    // but it will also create the structure of that path in the tree as needed as it searches
    function findTreeItem( oParent, sName, sID )
    {
        if ( oParent == null ){
            oItem = s_wMorphTreeWidget.findItem( sName, 0 );
            if( oItem != null ){
                if ( oItem.text( 0 ) == sName ){
                    return oItem;
                }
            }
            
            oNewItem = new DzListViewItem( s_wMorphTreeWidget );
            oNewItem.addDataItem("id", sID );
            oNewItem.setText( 0, sName );
            oNewItem.open = true;
            oNewItem.expandable = true;
            return oNewItem;
        }
        else{
            oItem = oParent.firstChild();
            while(oItem){
                if( oItem.text( 0 ) == sName ){
                    return oItem;
                }
                oItem = oItem.nextSibling();
            }
            oNewItem = new DzListViewItem( oParent );
            oNewItem.setText( 0, sName );
            oNewItem.open = true;
            oNewItem.expandable = true;
            oNewItem.addDataItem("id", sID );
            oParent.insertItem( oNewItem );
            return oNewItem;
        }
    };

    /*********************************************************************/
    // Void : For selection changes in the Left Tree
    function itemSelectionChanged()
    {
        s_oSelectedInTree = {};
        selectMorphsInNode( s_wMorphTreeWidget.currentItem() );
        filterChanged();
    };

    /*********************************************************************/
    // Void : Updates the list of selected morphs in the Left Tree
    // including any children
    function selectMorphsInNode( oSelectedItem )
    {
        sId = oSelectedItem.getDataItem( "id" );
        if ( sId in s_oMorphsForNode ){
            s_oSelectedInTree = s_oMorphsForNode[sId];
        }
    };

    /*********************************************************************/
    // Void : Add Morphs for export
    function handleAddMorphsButton()
    {
        for( var i = 0; i < s_oSelectedInTree.length; i++ ){
            oMorphInfo = s_oSelectedInTree[i]
            oItem = s_wMorphListWidget.findItem( oMorphInfo.label, 0 );
            if( oItem != null ){
                if(oItem.selected){
                    sMorphName = oItem.getDataItem( "name" );
                    if(sMorphName in s_oMorphs 
                        && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                        s_aMorphsToExport.push( s_oMorphs[sMorphName] );
                    }
                }
            }
        }
        refreshExportMorphList();
        refreshPresetsCombo();
    };

    /*********************************************************************/
    // Bool : Check if Morph is invalid.
    function ignoreMorph( oMorphProperty )
    {
        var sMorphName = getPropertyName( oMorphProperty );
        var aIgnoreCases = ["x", "y", "z"];
        for( var k = 0; k < aIgnoreCases.length; k++ ){
            var sCase = aIgnoreCases[k]
            if( sMorphName.toLowerCase()[0] == sCase ){
                return true;
            }
        }
        var nControllerCount = oMorphProperty.getNumControllers();
        for( var j = 0; j < nControllerCount; j++ ){
            var oErcLink = new DzERCLink();
            oErcLink = oMorphProperty.getController( j );
            if( oErcLink.type == 3 ){ //Multiply
                var oControllerProp = oErcLink.getProperty();
                if( oControllerProp.value == 0 ){
                    return true;
                }
            }
        }
        return false;
    };

    /*********************************************************************/
    // String : Get the property name even if name is Value
    function getPropertyName( oProperty )
	{
		var sPropertyName = oProperty.name;
		var oOwnerProperty = oProperty.getOwner();
		if( oOwnerProperty.inherits( "DzMorph" ) ){
			sPropertyName = oOwnerProperty.name;
		}
		return sPropertyName;
	};
    /*********************************************************************/
    // Void : Load morphs controlling the morphs in the export list
	function loadConnectedMorphs()
    {    
		// Load all the controller links on the properties
		for( var i = 0; i < s_aMorphsToExport.length; i++ ){
			var oMorphProperty = s_aMorphsToExport[i].property;
			var nControllerCount = oMorphProperty.getNumSlaveControllers();
			for( var j = 0; j < nControllerCount; j ++ ){
				oSlaveControler = oMorphProperty.getSlaveController( j );
                var oControlMorphProp = oSlaveControler.getOwner()
                if( ignoreMorph( oControlMorphProp ) ){
                    continue;
                }
                sMorphName = getPropertyName( oControlMorphProp )
                oMorphInfo= s_oMorphs[sMorphName]
                print(sMorphName)
                if( sMorphName in s_oMorphs 
                    && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                    s_aMorphsToExport.push( s_oMorphs[sMorphName] )
                }
		    }
        }
		refreshExportMorphList();
        refreshPresetsCombo();
			
	};
	
    /*********************************************************************/
    // Void : Remove morph from export list
    function handleRemoveMorphsButton()
    {
        for( var i = 0; i < s_aMorphsToExport.length; i++ ){
            oMorphInfo = s_aMorphsToExport[i]
            oItem = s_wMorphExportListWidget.findItem( oMorphInfo.label, 0 );
            if( oItem != null ){
                if( oItem.selected ){
                    sMorphName = oItem.getDataItem( "name" );
                    s_aMorphsToExport.splice( i, 1 );
                    i--;
                };
            };
        };
        refreshExportMorphList();
        refreshPresetsCombo();
    };

    /*********************************************************************/
    // Void : Brings up a dialog for choosing a preset name
    function handleSavePreset()
    {
        var sFile;
        var sFilters;

        sFilters = "CSV Files (*.csv)";
        sFile = FileDialog.doFileDialog(
                                         false, 
                                         qsTr( "Save Preset" ), 
                                         s_sPresetPath, 
                                         sFilters )
        if( sFile != null ){
            savePresetFile( sFile );
        }
    };

    /*********************************************************************/
    // Void : Saves out a preset.  If the path isn't supplied, it's saved as the last selection
    function savePresetFile( sFilePath )
    {
        var oDir;
        var oFile;

        oDir = new DzDir( "" );
        oDir.setPath( s_sPresetPath );
        if (sFilePath == null){
            sFilePath = s_sPresetPath + "LastUsed.csv";
        }
        oFile = new DzFile( sFilePath );
        if( !oFile.open( DzFile.WriteOnly ) ){
			print( String( "Unable to open \"%1\" for writing." ).arg( sFilePath ) );
			return;
		}

        oData = getMorphCSVString();
        if (oData.constructor === Array){
			for( var i = 0; i < oData.length; i += 1 ){
				oFile.writeLine( oData[i] );
			}
		}	
		else{
			oFile.write( oData )
		}
        oFile.close();
        refreshPresetsCombo();

    };

    /*********************************************************************/
    // Void : Refresh the Right export list
    function refreshExportMorphList()
    {
        s_wMorphExportListWidget.clear();
        
        for( var i = 0; i < s_aMorphsToExport.length; i++ ){
            oMorphInfo = s_aMorphsToExport[i]
            oItem = DzListViewItem( s_wMorphExportListWidget )
            oItem.setText( 0 ,oMorphInfo.label );
            oItem.addDataItem( "name", oMorphInfo.name );
        }
        savePresetFile( null );
    };

    /*********************************************************************/
    // Void: ...
    function handleArmJCMMorphsButton()
    {
        var aMorphsToAdd = [];

        aMorphsToAdd.push( "pJCMCollarTwist_n30_L" );
        aMorphsToAdd.push( "pJCMCollarTwist_n30_R" );
        aMorphsToAdd.push( "pJCMCollarTwist_p30_L" );
        aMorphsToAdd.push( "pJCMCollarTwist_p30_R" );
        aMorphsToAdd.push( "pJCMCollarUp_55_L" );
        aMorphsToAdd.push( "pJCMCollarUp_55_R" );
        aMorphsToAdd.push( "pJCMCollarUp_50_L" );
        aMorphsToAdd.push( "pJCMCollarUp_50_R" );
        aMorphsToAdd.push( "pJCMForeArmFwd_135_L" );
        aMorphsToAdd.push( "pJCMForeArmFwd_135_R" );
        aMorphsToAdd.push( "pJCMForeArmFwd_75_L" );
        aMorphsToAdd.push( "pJCMForeArmFwd_75_R" );
        aMorphsToAdd.push( "pJCMHandDwn_70_L" );
        aMorphsToAdd.push( "pJCMHandDwn_70_R" );
        aMorphsToAdd.push( "pJCMHandUp_80_L" );
        aMorphsToAdd.push( "pJCMHandUp_80_R" );
        aMorphsToAdd.push( "pJCMShldrDown_40_L" );
        aMorphsToAdd.push( "pJCMShldrDown_40_R" );
        aMorphsToAdd.push( "pJCMShldrDown_75_R" );
        aMorphsToAdd.push( "pJCMShldrDown2_75_L" );
        aMorphsToAdd.push( "pJCMShldrDown2_75_R" );
        aMorphsToAdd.push( "pJCMShldrFront_n110_Bend_n40_L" );
        aMorphsToAdd.push( "pJCMShldrFront_n110_Bend_p90_L" );
        aMorphsToAdd.push( "pJCMShldrFront_p110_Bend_n90_R" );
        aMorphsToAdd.push( "pJCMShldrFront_p110_Bend_p40_R" );
        aMorphsToAdd.push( "pJCMShldrFwdDwn_110_75_L" );
        aMorphsToAdd.push( "pJCMShldrFwdDwn_110_75_R" );
        aMorphsToAdd.push( "pJCMShldrFwd_110_L" );
        aMorphsToAdd.push( "pJCMShldrFwd_110_R" );
        aMorphsToAdd.push( "pJCMShldrFwd_95_L" );
        aMorphsToAdd.push( "pJCMShldrFwd_95_R" );
        aMorphsToAdd.push( "pJCMShldrUp_90_L" );
        aMorphsToAdd.push( "pJCMShldrUp_90_R" );
        aMorphsToAdd.push( "pJCMShldrUp_35_L" );
        aMorphsToAdd.push( "pJCMShldrUp_35_R" );

        
        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
        };

    /*********************************************************************/
    // Void: ...
    function handleLegsJCMMorphsButton()
    {
        var aMorphsToAdd = [];

        aMorphsToAdd.push( "pJCMBigToeDown_45_L" );
        aMorphsToAdd.push( "pJCMBigToeDown_45_R" );
        aMorphsToAdd.push( "pJCMFootDwn_75_L" );
        aMorphsToAdd.push( "pJCMFootDwn_75_R" );
        aMorphsToAdd.push( "pJCMFootUp_40_L" );
        aMorphsToAdd.push( "pJCMShinBend_155_L" );
        aMorphsToAdd.push( "pJCMShinBend_155_R" );
        aMorphsToAdd.push( "pJCMShinBend_90_L" );
        aMorphsToAdd.push( "pJCMShinBend_90_R" );
        aMorphsToAdd.push( "pJCMThighBack_35_L" );
        aMorphsToAdd.push( "pJCMThighBack_35_R" );
        aMorphsToAdd.push( "pJCMThighFwd_115_L" );
        aMorphsToAdd.push( "pJCMThighFwd_115_R" );
        aMorphsToAdd.push( "pJCMThighFwd_57_L" );
        aMorphsToAdd.push( "pJCMThighFwd_57_R" );
        aMorphsToAdd.push( "pJCMThighSide_85_L" );
        aMorphsToAdd.push( "pJCMThighSide_85_R" );
        aMorphsToAdd.push( "pJCMToesUp_60_L" );
        aMorphsToAdd.push( "pJCMToesUp_60_R" );

        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
    };

    /*********************************************************************/
    // Void: ...
    function handleTorsoJCMMorphsButton()
    {
        var aMorphsToAdd = [];

        aMorphsToAdd.push( "pJCMAbdomen2Fwd_40" );
        aMorphsToAdd.push( "pJCMAbdomen2Side_24_L" );
        aMorphsToAdd.push( "pJCMAbdomen2Side_24_R" );
        aMorphsToAdd.push( "pJCMAbdomenFwd_35" );
        aMorphsToAdd.push( "pJCMAbdomenLowerFwd_Navel" );
        aMorphsToAdd.push( "pJCMAbdomenUpperFwd_Navel" );
        aMorphsToAdd.push( "pJCMHeadBack_27" );
        aMorphsToAdd.push( "pJCMHeadFwd_25" );
        aMorphsToAdd.push( "pJCMNeckBack_27" );
        aMorphsToAdd.push( "pJCMNeckFwd_35" );
        aMorphsToAdd.push( "pJCMNeckLowerSide_40_L" );
        aMorphsToAdd.push( "pJCMNeckLowerSide_40_R" );
        aMorphsToAdd.push( "pJCMNeckTwist_22_L" );
        aMorphsToAdd.push( "pJCMNeckTwist_22_R" );
        aMorphsToAdd.push( "pJCMNeckTwist_Reverse" );
        aMorphsToAdd.push( "pJCMPelvisFwd_25" );
        aMorphsToAdd.push( "pJCMChestFwd_35" );
        aMorphsToAdd.push( "pJCMChestSide_20_L" );
        aMorphsToAdd.push( "pJCMChestSide_20_R" );

        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
    };

    /*********************************************************************/
    // Void: ...
    function handleGen8ExpressMorphsButton()
    {
        var aMorphsToAdd = [];


        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
    };

    /*********************************************************************/
    // Void: ...
    function handleGen8_1ExpressMorphsButton()
    {
        var aMorphsToAdd = [];


        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
    };

    /*********************************************************************/
    // Void: ...
    function handleGen8FaceMorphsButton()
    {
        var aMorphsToAdd = [];


        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
    };

    /*********************************************************************/
    // Void: ...
    function handleGen8_1FaceMorphsButton()
    {
        var aMorphsToAdd = [];
        aMorphsToAdd.push( "facs_jnt_EyeWideLeft" );
        aMorphsToAdd.push( "facs_jnt_EyeWideRight" );
        aMorphsToAdd.push( "facs_jnt_EyeBlinkLeft" );
        aMorphsToAdd.push( "facs_jnt_EyeBlinkRight" );
        aMorphsToAdd.push( "facs_bs_EyeSquintLeft_div2" );
        aMorphsToAdd.push( "facs_bs_EyeSquintRight_div2" );
        aMorphsToAdd.push( "facs_jnt_JawForward" );
        aMorphsToAdd.push( "facs_jnt_JawLeft" );
        aMorphsToAdd.push( "facs_jnt_JawOpen" );
        aMorphsToAdd.push( "facs_bs_MouthClose_div2" );
        aMorphsToAdd.push( "facs_bs_MouthFunnel_div2" );
        aMorphsToAdd.push( "facs_bs_MouthPucker_div2" );
        aMorphsToAdd.push( "facs_bs_MouthLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthRight_div2" );
        aMorphsToAdd.push( "facs_bs_MouthSmileLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthSmileRight_div2" );
        aMorphsToAdd.push( "facs_bs_MouthFrownLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthFrownRight_div2" );
        aMorphsToAdd.push( "facs_bs_MouthDimpleLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthDimpleRight_div2" );
        aMorphsToAdd.push( "facs_bs_MouthStretchLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthStretchRight_div2" );
        aMorphsToAdd.push( "facs_bs_MouthRollLower_div2" );
        aMorphsToAdd.push( "facs_bs_MouthRollUpper_div2" );
        aMorphsToAdd.push( "facs_bs_MouthShrugLower_div2" );
        aMorphsToAdd.push( "facs_bs_MouthShrugUpper_div2" );
        aMorphsToAdd.push( "facs_bs_MouthPressLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthPressRight_div2" );
        aMorphsToAdd.push( "facs_bs_MouthLowerDownLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthLowerDownRight_div2" );
        aMorphsToAdd.push( "facs_bs_MouthUpperUpLeft_div2" );
        aMorphsToAdd.push( "facs_bs_MouthUpperUpRight_div2" );
        aMorphsToAdd.push( "facs_bs_BrowDownLeft_div2" );
        aMorphsToAdd.push( "facs_bs_BrowDownRight_div2" );
        aMorphsToAdd.push( "facs_ctrl_BrowInnerUp" );
        aMorphsToAdd.push( "facs_bs_BrowOuterUpLeft_div2" );
        aMorphsToAdd.push( "facs_bs_BrowOuterUpRight_div2" );
        aMorphsToAdd.push( "facs_ctrl_CheekPuff" );
        aMorphsToAdd.push( "facs_bs_CheekSquintLeft_div2" );
        aMorphsToAdd.push( "facs_bs_CheekSquintRight_div2" );
        aMorphsToAdd.push( "facs_bs_NoseSneerLeft_div2" );
        aMorphsToAdd.push( "facs_bs_NoseSneerRight_div2" );
        aMorphsToAdd.push( "facs_bs_TongueOut" );

        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
    };


    /*********************************************************************/
    // Void: ...
    function handleVismesMorphsButton()
    {
        var aMorphsToAdd = [];

        aMorphsToAdd.push( "eCTRLvSH" );
        aMorphsToAdd.push( "eCTRLvW" );
        aMorphsToAdd.push( "eCTRLvM" );
        aMorphsToAdd.push( "eCTRLvF" );
        aMorphsToAdd.push(" eCTRLMouthOpen" );
        aMorphsToAdd.push( "eCTRLMouthWide-Narrow" ); 
        aMorphsToAdd.push( "eCTRLTongueIn-Out" );
        aMorphsToAdd.push( "eCTRLTongueUp-Down" );

        for( var i = 0; i < aMorphsToAdd.length; i++ ){
            sMorphName = aMorphsToAdd[i]
            // Add the list for export
            if(sMorphName in s_oMorphs 
                && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                s_aMorphsToExport.push( s_oMorphs[sMorphName] );
            }
        }
        refreshExportMorphList();
    };

    /*********************************************************************/
    // Void : Refresh the list of preset csvs from the files in the folder
    function refreshPresetsCombo()
    {
        // Need to understand disconnecting signals
        disconnect( s_wPresetCombo, "currentIndexChanged(const QString&)", handlePresetChanged );
        var oDir;
        var sPath;

        s_wPresetCombo.clear();
        s_wPresetCombo.addItem( "None" );

        oDir = new DzDir( "" );
        oDir.setPath( s_sPresetPath );
        aPaths = oDir.entryList( "*csv" );
        for( var i = 0; i < aPaths.length; i++ ){
            sPath = aPaths[i]
            s_wPresetCombo.addItem( sPath )
        }
        connect( s_wPresetCombo, "currentIndexChanged(const QString&)", handlePresetChanged );
    };

    /*********************************************************************/
    // Void : Call when the preset combo is changed by the user
    function handlePresetChanged( sCustomName )
    {
        s_aMorphsToExport = [];
        if( sCustomName != undefined ){
            sPresetFilePath = s_sPresetPath + sCustomName;
        }
        else{
            sPresetName = s_wPresetCombo.currentText; 
            sPresetFilePath = s_sPresetPath + sPresetName;
        }
        oFile = new DzFile( sPresetFilePath );
        if( !oFile.open( DzFile.ReadOnly ) ){
			print( String( "Unable to open \"%1\" for Reading." ).arg( sPresetFilePath ) );
			return;
		}

        aMorphLines = oFile.readLines();
        for( var i = 0; i < aMorphLines.length; i++ ){
            sMorphLine = aMorphLines[i]
            if( sMorphLine.indexOf( "\"Export\"" ) > 0 ){
                aItems = sMorphLine.split(",");
                sMorphName = aItems[0].replace("\"", "").replace("\"", "");
                if ( sMorphName in s_oMorphs 
                    && !( containsObject( s_oMorphs[sMorphName], s_aMorphsToExport ) ) ){
                    s_aMorphsToExport.push( s_oMorphs[sMorphName] );
                }
            }
        }

        refreshExportMorphList();
        oFile.close();
    };

    /*********************************************************************/
    // String : Get the morph string in the format for the Daz FBX Export
    function getMorphString()
    {
        var aMorphNamesToExport;
        var sMorphString

        if ( s_aMorphsToExport.length == 0 )
        {
            return "";
        }
        aMorphNamesToExport = [];
        sMorphString = "";
        for( var i = 0; i < s_aMorphsToExport.length; i++ ){
            oMorphInfo = s_aMorphsToExport[i]
            aMorphNamesToExport.push( oMorphInfo.name );
        }
        sMorphString = aMorphNamesToExport.join("\n1\n");
        sMorphString += "\n1\n.CTRLVS\n2\nAnything\n0";
        return sMorphString;
    };

    /*********************************************************************/
    // String : Get the morph string in the format used for presets
    function getMorphCSVString()
    {
        var sMorphString;

        s_aMorphList = [];
        sMorphString = "";
        for( var i = 0; i < s_aMorphsToExport.length; i++ ){
            oMorphInfo = s_aMorphsToExport[i]
            s_aMorphList.push(oMorphInfo.name);
            sMorphString += "\"" + oMorphInfo.name + "\",\"Export\"\n";
        }
        sMorphString += "\".CTRLVS\", \"Ignore\"\n";
        sMorphString += "\"Anything\", \"Bake\"\n";
        return sMorphString;
    };

    /*********************************************************************/
    function main()
    {
        var wDlg = new DzBasicDialog();
        initilizeArgs();
        morphSelectionDialog( wDlg );
        prepareDialog();
        // When user Cancels the dialog
		if( !wDlg.exec() ){
            return false;
		}
        return true
        
    };

    /*********************************************************************/
    if( main() )
    {
        return s_aMorphsToExport;
    }
    else{
        return [];
    }

    
})( getArguments() );

